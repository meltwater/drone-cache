---
kind: pipeline
name: build

platform:
  os: linux
  arch: amd64

clone:
  depth: 50

steps:
- name: fetch
  image: docker:git
  commands:
  - git fetch --tags

- name: restore-cache
  pull: true
  image: meltwater/drone-cache:dev
  settings:
    bucket: drone-cache-bucket
    mount:
    - vendor
    region: eu-west-1
    restore: true
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: aws_access_key_id
    AWS_SECRET_ACCESS_KEY:
      from_secret: aws_secret_access_key

- name: restore-cache-with-key
  image: meltwater/drone-cache:dev
  settings:
    bucket: drone-cache-bucket
    cache_key: "{{ .Repo.Name }}_{{ checksum \"go.mod\" }}_{{ checksum \"go.sum\" }}_{{ arch }}_{{ os }}"
    mount:
    - vendor
    pull: true
    region: eu-west-1
    restore: true
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: aws_access_key_id
    AWS_SECRET_ACCESS_KEY:
      from_secret: aws_secret_access_key

- name: restore-cache-with-gzip
  pull: true
  image: meltwater/drone-cache:dev
  settings:
    archive_format: gzip
    bucket: drone-cache-bucket
    cache_key: gzip
    mount:
    - vendor
    region: eu-west-1
    restore: true
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: aws_access_key_id
    AWS_SECRET_ACCESS_KEY:
      from_secret: aws_secret_access_key

- name: restore-cache-with-filesystem
  pull: true
  image: meltwater/drone-cache:dev
  settings:
    archive_format: gzip
    backend: filesystem
    cache_key: volume
    mount:
    - vendor
    restore: true
  volumes:
  - name: cache
    path: /tmp/cache

- name: restore-cache-debug
  image: meltwater/drone-cache:dev
  settings:
    debug: true
    pull: true
    restore: true

- name: build
  pull: true
  image: golang:1.11-alpine
  commands:
  - apk add --update make git
  - make drone-cache

- name: test
  pull: true
  image: golang:1.11-alpine
  commands:
  - go test -v -mod=vendor -cover ./...
  environment:
    CGO_ENABLED: 0
    TEST_ENDPOINT: filestorage:9000
  volumes:
  - name: testcache
    path: /drone/src/testcache/cache

- name: analyze
  pull: true
  image: golang:1.11-alpine
  commands:
  - "wget -O - -q https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s v1.14.0"
  - ./bin/golangci-lint run -v --enable-all -D gochecknoglobals
  environment:
    CGO_ENABLED: 0

- name: rebuild-cache
  pull: true
  image: meltwater/drone-cache:dev
  settings:
    bucket: drone-cache-bucket
    mount:
    - vendor
    rebuild: true
    region: eu-west-1
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: aws_access_key_id
    AWS_SECRET_ACCESS_KEY:
      from_secret: aws_secret_access_key

- name: rebuild-cache-with-key
  pull: true
  image: meltwater/drone-cache:dev
  settings:
    bucket: drone-cache-bucket
    cache_key: "{{ .Repo.Name }}_{{ checksum \"go.mod\" }}_{{ checksum \"go.sum\" }}_{{ arch }}_{{ os }}"
    mount:
    - vendor
    rebuild: true
    region: eu-west-1
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: aws_access_key_id
    AWS_SECRET_ACCESS_KEY:
      from_secret: aws_secret_access_key

- name: rebuild-cache-with-gzip
  pull: true
  image: meltwater/drone-cache:dev
  settings:
    archive_format: gzip
    bucket: drone-cache-bucket
    cache_key: gzip
    mount:
    - vendor
    rebuild: true
    region: eu-west-1
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: aws_access_key_id
    AWS_SECRET_ACCESS_KEY:
      from_secret: aws_secret_access_key

- name: rebuild-cache-with-filesystem
  pull: true
  image: meltwater/drone-cache:dev
  settings:
    archive_format: gzip
    backend: filesystem
    cache_key: volume
    mount:
    - vendor
    rebuild: true
  volumes:
  - name: cache
    path: /tmp/cache

services:
- name: filestorage
  image: minio/minio:RELEASE.2018-10-06T00-15-16Z
  commands:
  - minio server /data
  environment:
    MINIO_ACCESS_KEY: AKIAIOSFODNN7EXAMPLE
    MINIO_REGION: eu-west-1
    MINIO_SECRET_KEY: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
  ports:
  - 9000

volumes:
- name: cache
  temp: {}
- name: testcache
  temp: {}

trigger:
  branch:
  - master
  event:
  - push
  - pull_request

---
kind: pipeline
name: release

platform:
  os: linux
  arch: amd64

steps:
- name: fetch
  image: docker:git
  commands:
  - git fetch --tags

- name: github-release-tag
  image: golang:1.11
  commands:
  # - TODO install upx
  - git status
  - "curl -sL https://git.io/goreleaser | bash"
  - git status
  environment:
    github_token:
      from_secret: github_token
    docker_password:
      from_secret: docker_password
    docker_username:
      from_secret: docker_username
  when:
    ref:
    - "refs/tags/*"

trigger:
  branch:
  - master
  event:
  - push
  # - tag
  status:
  - success

depends_on:
- build

...
